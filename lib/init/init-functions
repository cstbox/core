# CSTBox services init scripts common part

# This file is part of CSTBox.
#
# CSTBox is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CSTBox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with CSTBox.  If not, see <http://www.gnu.org/licenses/>.

#
# This file is sourced by scripts placed in /etc/init.d. For standard needs, these scripts
# only need to define the following environment variables before sourcing us :
#
# PATH=/sbin:/usr/sbin:/bin:/usr/bin
# DESC="<short description displayed when starting/stoping the service>"
# NAME=<service name>
# DAEMON=<daemon path>
# DAEMON_ARGS="<optional daemon arguments>"
# INIT_VERBOSE=yes
#
# CSTBOX_xxx environment variables are set in /etc/cstbox/setenv. They can be customized if needed
# by creating a /etc/cstbox/setenv.local file with the required overrides or additions.
#
# DBus related remark:
# -------------------
# Since almost all components of the CSTBox use DBus to communicate with other ones,
# the USES_DBUS flag is set to 1 by default, which triggers related actions, such as loading
# the DBus related environment variables.
# If your component does not need them, or has chances to be started before the DBus context
# is initialized, add the USES_DBUS=0 environment variable setting with the ones described above.
#
# Author: Eric Pascual <eric.pascual@cstb.fr>

PATH=/sbin:/usr/sbin:/bin:/usr/bin

# almost all CSTBox components use DBus, so the flag is set by default
${USES_DBUS:=1}

# setup global definitions, such as PYTHONPATH and all the CSTBOX_xxx variables
. /etc/cstbox/setenv
if [ -f /etc/cstbox/setenv.local ] ; then
    . /etc/cstbox/setenv.local
fi

PIDFILE=$CSTBOX_VAR_RUN/$NAME.pid
LOGFILE=$CSTBOX_LOG_DIR/$NAME.log
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the daemon is not configured
if [ -z "$DAEMON" ] ; then
	echo "[FATAL] Cannot start $NAME : daemon executable not specified or not installed" >> $LOGFILE
	exit 3
fi
# Exit if the package is not installed
if [ ! -f "$DAEMON" ] ; then
	echo "[FATAL] Cannot start $NAME : file not found ($DAEMON)" >> $LOGFILE
	exit 3
fi
if [ ! -x "$DAEMON" ] ; then
	echo "[FATAL] Cannot start $NAME : file is not executable ($DAEMON)" >> $LOGFILE
	exit 3
fi

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	log_daemon_msg "Starting $NAME ($DESC)"
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	if [ -f $PIDFILE ] ; then
		echo -n " already started"
		RETVAL=1
	else
	    # load the DBus environment variables if the component uses DBus
	    if [ $USES_DBUS -eq 1 ] ; then
    		. $CSTBOX_VAR_RUN/cstbox-dbus
        fi

		echo "" >> $LOGFILE
		echo "-------- Starting service $NAME at $(date)" >> $LOGFILE

		# check start dependencies if any
		if [ -n "$DEPENDS" ] ; then
			pgrep $DEPENDS 2>&1 > /dev/null
			if [ $? -ne 0 ] ; then
			   echo "starting not running dependency : $DEPENDS"
			   service $DEPENDS start
			   sleep 1
			fi
		fi

        # start the daemon now
		$DAEMON $DAEMON_ARGS >> $LOGFILE 2>&1 &
		pid=$!
		RETVAL="$?"
	fi

	# check if the process didn't hang during startup
	# TODO find something more reliable as a strategy than a basic delayed  check
	sleep 1
	kill -0 $pid 2> /dev/null && echo $pid > $PIDFILE || RETVAL=2

	case "$RETVAL" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac

	return $RETVAL
}

#
# Function that stops the daemon/service
#
do_stop()
{
	log_daemon_msg "Stopping $NAME ($DESC)"
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	if [ -f $PIDFILE ] ; then
		echo "" >> $LOGFILE
		echo "-------- Stopping service $NAME at $(date)" >> $LOGFILE
		read pid < $PIDFILE
		kill $pid 2> /dev/null
		RETVAL="$?"
	else
		RETVAL=1
	fi
	case "$RETVAL" in
		0|1)
			log_end_msg 0
			rm -f $PIDFILE
			;;
		2)
			log_end_msg 1
			;;
	esac

	return "$RETVAL"
}

case "$1" in
	start)
		do_start
		;;
	stop)
		do_stop
		;;
	status)
		pgrep -c -f $DAEMON > /dev/null
		case "$?" in
			0) echo "$NAME is running" ; exit 0 ;;
			*) echo "$NAME is not running" ; exit 1 ;;
		esac
		;;
	restart|force-reload)
		do_stop
		case "$?" in
			0|1)
				do_start
				;;
			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;
	*)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac
